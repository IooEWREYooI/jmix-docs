= Getting Started with Search

This guide shows how to start using Search in your application.

Let's consider that you want to add a couple of entities into your application and set up searching among their attributes.

First, do the following:

. Add Search to your project according to the xref:search:index.adoc#installation[installation] section.
. xref:search:index.adoc#connecting-to-elasticsearch-service[Configure] a connection to Elasticsearch depending on the service location.

== Create Data Model and Screens

Let's create the following classes:

. The `Status` enumeration with the `SILVER` and `GOLD` values.
. The `Customer` entity with the fields:

* `firstName` with `String` type
* `lastName` with `String` type
* `status` with `Status` type
* `card` with `FileRef` type

. The Order entity with the fields:

* `date` with `Date` type
* `number` with `String` type
* `amount` with `Integer` type
* `product` with `String` type
* `customer` with association to `Customer`, many-to-one cardinality

Set up the xref:data-model:entities.adoc#instance-name[instance name] for the `Order` entity to be displayed as the search result.

Create edit and browse screens for the `Customer` and `Order` entities.

== Create Index Definition Interface

Then, you need to create Index Definition - an interface that describes what entities and attributes should be indexed. Let's assume that we are going to search orders by their number, product name, customer status or customer last name. Within Index Definition we will create a method to define the necessary attributes.

[source,java,indent=0]
----
include::example$/ex1/src/main/java/search/ex1/service/OrderIndexDefinition.java[tags=index-definition1;order-mapping;index-definition2]
----
. The interface should be annotated with `@JmixEntitySearchIndex` with the mandatory parameter `entity`.
. The interface can have any name.
. The `@AutoMappedField` annotation automatically maps requested properties. In our case we will use `includeProperties` parameter and specify names of the attributes that should be indexed.
. The method can have any name.

[[configure_index_naming]]
== Configure Index Naming

By default, indexes created in the project have the `search_index_` prefix. In the future, you may use the same Elasticsearch service in multiple projects. So, to ensure that the index names will be unique let's change the default prefix. Add the following property to your `application.properties` file:

[source,properties,indent=0]
----
include::example$/ex1/src/main/resources/application.properties[tags=prefix]
----

== Configure Indexing Queue Processing

Jmix application tracks data changes but does not pass them to Elasticsearch automatically. To update Elasticsearch indexes regularly, just add the xref:quartz:index.adoc[] add-on to the project. The Search add-on will use it for periodic processing of the indexing queue with default settings.

== Create Search Screen

. Create a blank screen using Studio templates with the *Search screen* name.
. Add the `xmlns:search="http://jmix.io/schema/search/ui` namespace to the root element of the screen XML descriptor:
+
[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/search/ex1/screen/search/search-screen.xml[tags=namespace]
----
+
. Add the `searchField` component inside the `layout` element:
+
[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/search/ex1/screen/search/search-screen.xml[tags=search-field]
----

Now, the screen contains a text field for entering the search term and the button to run search.

== Test Searching in Application

Now, we are ready to run and test the application.

First, add some instances of the `Customer` and `Order` entities.

Open the *Search screen* and let's find customers with the `Silver` status. 

image::search-screen.png[align="center"]

The search results will be displayed in another screen.

image::search-result.png[align="center"]

By clicking on one of the results, the editor screen will be opened.
