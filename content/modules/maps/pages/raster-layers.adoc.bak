[[raster-layers]]
= Raster Layers

Raster layers consist of raster images that are a grid of pixels. Raster layer usually serves as a base background layer of a map. You can download raster images using different providers: tile servers and WMS services.

The add-on supports the following types of layers:

 * *Tile layer* is used to display tiles provided by  xref:map-services.adoc#xyz-tiles[XYZ tiles] services.
 * *Web Map Service (WMS) layer* is used to display tiles from xref:map-services.adoc#web-map-service[Web Map Service].
 * *Image layer* is used for displaying an image over specific bounds of a map.

== Tile Layer

`TileLayer` is used to load and display tiles that are served through a web server with URL like `\http://.../\{z}/\{x}/\{y}.png`. For example, https://www.openstreetmap.org[OpenStreetMap] tiles URL pattern is: `\https://\{s}.tile.openstreetmap.org/\{z}/\{x}/\{y}.png`.

To add a tile layer on a map, declare it in the XML descriptor:

[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/maps/ex1/screen/territory/territory-browse-tile1.xml[tags=tile-xml]
----

`id` and `urlPattern` are required if `tileProvider` is not specified.

NOTE: Most tile servers require attribution, which you can set in `attribution` parameter. In our example, the credit `©OpenStreetMap` contributors will appear in the lower-right corner.

In `subDomains` parameter, you can specify comma-separated values for `\{s}` placeholder in the `urlPattern`. Default values are `"a,b,c"` which are used by most tile services including OpenStreetMap.

OpenStreetMap tile provider comes out of the box, so you can use it like this:

[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/maps/ex1/screen/order/order-edit.xml[tags=open-street-map]
----

Additionally you can perform the tile layer in the screen controller using `io.jmix.mapsui.component.layer.TileLayer` class:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/territory/TerritoryBrowseTile2.java[tags=tile-java]
----

=== Create Bean Providing Tiles

In order not to clutter the XML descriptors with the URL and attribution strings you can create Spring bean and use `tileProvider` attribute:

. Move tile server settings to the bean implementing `io.jmix.mapsui.component.layer.TileProvider` interface.
+
[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/config/CartoTileProvider.java[tags=bean]
----
+
. Specify a bean name in a `tileProvider` attribute of the `tile` element.
+
[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/maps/ex1/screen/territory/territory-browse.xml[tags=tile-provider]
----

== WMS Layer

`WMSTileLayer` uses various xref:map-services.adoc#web-map-service[WMS services] as a map provider. You can declare it in the XML descriptor:

[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/maps/ex1/screen/territory/territory-browse-wms1.xml[tags=wms-xml]
----

`id`, `url` and `layers` are required parameters. Other parameters have default values, which can be redefined.

Also, you can perform a layer in the screen controller using `io.jmix.mapsui.component.layer.WMSTileLayer` class:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/territory/TerritoryBrowseWms2.java[tags=wms-java]
----

== Image Layer

Image layer is used for displaying an image over specific bounds of a map.

`ImageLayer` can be declared in the XML descriptor:

[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/maps/ex1/screen/territory/territory-browse-image1.xml[tags=image-xml]
----

* `image` parameter describes a path to the image.
The path should start with one of the following prefixes defining the source of an image:
+
--
** `url:` — the image will be loaded from the given URL.
** `file:`  — the image will be served from the file system.
+
[source,xml]
----
image="file:D:/myImage.png"
----

** `classpath:` — the image will be served from the classpath, for example, `com/company/demo/web/myImage.png`:
+
[source,xml]
----
image="classpath:/com/company/demo/web/myImage.png"
----

** `theme:` — the image will be served from the current theme directory, for example, `web/themes/hover/awesomeFolder/myImage.png`:
+
[source,xml]
----
image="theme:awesomeFolder/myImage.png"
----
--
+
You can also load the image programmatically by declaring the `geoImageDelegate` function:
+
[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/territory/TerritoryBrowseImage2.java[tags=image-java]
----
+
* `topLeft` parameter defines the north-west point of the image.
* `bottomRight` parameter defines the south-east point of the image.

NOTE: In case of using an SVG image in the `ImageLayer`, make sure that SVG document contains `width/height` or `viewBox` attributes, which are needed for the SVG image to behave correctly on zooming a map.