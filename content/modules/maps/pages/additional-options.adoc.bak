= Additional Options

== Pop-up Window

The add-on provides an ability to display some information in a pop-up window on a map.

image::popup.png[]

The `GeoMap` UI component has the `openPopup(PopupWindow popupWindow)` method that instantly opens the given pop-up window. Class `PopupWindow` contains two main parameters:

* `point` — the geographical point where the pop-up will be opened.
* `content` — the HTML content of the pop-up window.

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/Canvas.java[tags=map;popup-window]
----

You can set additional options for the pop-up window by passing an instance of the `PopupWindowOptions` class, which contains the following parameters:

* `closeButtonEnabled` — whether the close button is enabled in a pop-up window.
* `closeOnClick` — whether a pop-up window should be closed when a user clicks on the map.
* `maxWidth` — the maximum width of the pop-up window in pixels. The default value is `300`.
* `minWidth` — the minimum width of the pop-up window in pixels. The default value is `50`.

A pop-up window can be attached to geometry. The pop-up window will be opened when a user clicks on the geometry on a map.

In case of canvas geometries, you can specify pop-up window in this way:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/Canvas.java[tags=popup]
----

In case of `VectorLayer`, you can specify the `popupContentProvider`, which is a function that generates content for each geo-object's pop-up window based on some geo-object parameters.

It can be performed declaratively using the `@Install` annotation in a screen controller, for example:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/order/OrderBrowse1.java[tags=popup-provider]
----

== Tooltip

In addition to pop-up windows, you can display small text in tooltips. Tooltips generally appear on hovering over geometries, but you can define them to be permanent, thereby using them as text labels picked to geometries:

image::tooltip.png[]

In case of `VectorLayer`, you can specify the `tooltipContentProvider`, which is a function that generates content for each geo-object's tooltip based on some geo-object parameters.

You can performe it declaratively using the `@Install` annotation in the screen controller, for example:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/order/OrderBrowse.java[tags=tooltip]
----

In case of сanvas geometries, you can specify tooltips this way:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/Canvas.java[tags=tooltip]
----

Also, you can set additional options for a tooltip box by passing an instance of the `TooltipOptions` class, which contains the following parameters:

* `direction` — defines where a tooltip opens in relation to the geometry: `right`, `left`, `top`, `bottom`, `center`, `auto`. The default value is `auto`). The `auto` value dynamically switches between `right` and `left` according to the geometry position on the map.
* `permanent` — defines whether to open the tooltip permanently or only on mouseover. The default value is `false`.
* `sticky` — if set to `true`, a tooltip will follow the mouse instead of being fixed at the feature center. The default value is `false`.
* `interactive` — if set to `true`, a tooltip will accept mouse clicks. The default value is `false`.
* `opacity` — tooltip box opacity. The default value is `0.9`.

== Point Icons

You can define a style for point icons. There are the following kinds of icons:

. The default icon is a blue marker image, and it is used when the style is not specified for a point.
+
image::default-icon.png[]
+
. `FontIcon` looks like the default icon, but you can specify Font Awesome symbol inside it:
+
[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/order/OrderBrowse1.java[tags=font-icon]
----
+
image::font-icon.png[]
+
. `ImageIcon` allows you to use an image as an icon.
+
[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/order/OrderBrowse2.java[tags=image-icon]
----
+
image::image-icon.png[]
+
. `DivPointIcon` is a fully custom lightweight icon that uses the `<div>` element instead of an image.
+
For example, you can create an icon that combines an image with a text label:
+
[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/order/OrderBrowse3.java[tags=div-icon]
----
+
image::div-icon.png[]
