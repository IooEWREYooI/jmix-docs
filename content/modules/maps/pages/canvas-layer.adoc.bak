[[canvas-layer]]
= Canvas Layer

`CanvasLayer` is a utility layer belonging to a map by default. This layer is used to draw and display geometries on a map. It is similar to `VectorLayer` since they both display vector geometries. The difference is that `VectorLayer` works with geo-objects while `CanvasLayer` works just with geometries.

//It makes the task of displaying some geometry on a map really straightforward, so there is no need to store data in an entity.

To obtain the canvas layer of a map, call `map.getCanvas()` method. Here is an example of adding a geographical point on the canvas layer:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/Canvas.java[tags=map;table;show-order]
----

Methods that add geometries on a canvas return an object that represents this geometry on the canvas: `CanvasLayer.Point`, `CanvasLayer.Polyline` or `CanvasLayer.Polygon`. Using this object, you can define a style or pop-up window, subscribe to events connected with the geometry, or use this object when you want to remove the geometry from the canvas.

Here is an example of setting style for the point:

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/Canvas.java[tags=canvas-methods]
----

You can also draw geometries on the canvas via UI. For example, to draw a point invoke `canvas.drawPoint()` method. After this method is called the map will turn into the drawing mode. The method accepts `Consumer<CanvasLayer.Point>` function, in which you can perform additional actions with the drawn point.

[source,java,indent=0]
----
include::example$/ex1/src/main/java/maps/ex1/screen/Canvas.java[tags=map;table;consumer]
----

TIP: Before drawing geometries via UI on the canvas, you need to select the canvas on the map by calling `map.selectLayerById(CanvasLayer.ID)`.

You can also specify the selected layer in the XML descriptor:

[source,xml,indent=0]
----
include::example$/ex1/src/main/resources/maps/ex1/screen/canvas.xml[tags=canvas-xml]
----
