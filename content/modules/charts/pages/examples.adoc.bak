= Examples
:figure-caption!:

[[creating-chart-with-data-from-entity]]
== Creating Chart with Data from Entity

In this example, we will create a chart similar to https://www.amcharts.com/demos/3d-stacked-column-chart/[3D Stacked Column Chart^] from AmCharts demos. The type of the chart will be xref:charts:types/serial-chart.adoc[SerialChart]. This chart will retrieve data from a database, so the `dataContainer` attribute has to be defined. 

[[from-entity-creating-entity]]
=== Creating Entity

Let's create an entity with the `CountryGrowth` name and the following attributes:

* `country` of the `String` type
* `year2020` of the `Double` type
* `year2021` of the `Double` type

The source code of the `CountryGrowth` entity will look like this:

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/entity/CountryGrowth.java[tags=country-growth]
----

This class describes a non-persistent entity. An instance of this class contains the number of the country's GDP growth rate for 2020 and 2021 years.

[[from-entity-screen-xml-descriptor]]
=== Screen XML Descriptor

Create a new blank screen and replace the code in the XML descriptor with the following:

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/examples/column3d-chart.xml[tags=column3d-chart]
----

<1> The root `window` element contains the `chart` namespace to enable using charts in the screen.
<2> The chart retrieves data from the `countryGrowthDc` data container defined in the `CollectionContainer`. Names and values are displayed using the `country`, `year2020` and `year2021` attributes of the `CountryGrowth` entity.
<3> The `chart:serialChart` component contains the following attributes:

* `angle` – defines the chart angle. Values can be from `0` to `90`.
* `balloonText` – defines a text for the tooltip that appears when hovering over a column. You can use the following tags: `\[[value]]`, `\[[title]]`, `\[[persents]]`, `\[[description]]`, as well as keys from the `DataItem` listed in the `DataProvider` instance, or names of the entity attributes from the data container. To use `html` tags you should escape them.
* `depth3D` – chart thickness. When it is used in combination with the `angle` attribute, it helps to create a 3D effect.
* `plotAreaFillAlphas` – opacity of the plot area.
* `startDuration` – duration of the animation in seconds.
* `categoryField` – a key from the set of pairs contained in the `DataItem` objects listed in the `DataProvider` instance. This key is used to determine the labels for the category axis.

<4> `chart:categoryAxis` – an element of the `chart:serialChart` component that describes the category axis.

* The `gridPosition` attribute specifies if a grid line is placed in the center of a cell or at the beginning of a cell.
<5>  `chart:valueAxes` – an element of the `chart:serialChart` component that defines vertical value axes. In our case, only one vertical axis is used. The axis is described by the `chart:axis` element.

* The `position` attribute defines the position of the value axis relative to the chart.
* Setting `stackType` to `BOX_3D` makes the chart display columns one behind the other.

<6> `chart:graphs` – an element of the `chart:serialChart` component  that contains a collection of `chart:graph` elements. The graph is described by the `chart:graph` element.

* The `type` attribute defines the type of the graph and can be: line, column, step line, smoothed line, OHLC, and candlestick.
* The `valueField` attribute defines a key from the list of pairs contained in the `DataItem` objects listed in the `DataProvider` instance; this key is used to determine the value.
* The `fillAlphas` attribute defines the opacity of fill.
* The `lineAlpha` attribute defines the opacity of the line (or column border). The value range is `0` – `1`.

<7> `chart:export` – an optional element that enables chart export.

[[from-entity-screen-controller]]
=== Screen Controller

Open the `Column3dChart` screen controller and replace its content with the following code:

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/Column3dChart.java[tags=column3d-chart1;column3d-chart2;column3d-chart3;column3d-chart4;country-growth;column3d-chart5]
----

The `onInit` method populates the `countryGrowthDc` data container with the data.

[[from-entity-result]]
=== Result

Now let’s see how the created screen looks in the actual application.

.Column 3D Chart
image::charts/column3d-chart.png[align="center"]

[[creating-chart-with-data-from-dataprovider]]
== Creating Chart with Data from DataProvider

This chart retrieves data through the `DataProvider` created in the controller, so the `dataContainer` attribute is not defined.

[[from-dataprovider-screen-xml-descriptor]]
=== Screen XML Descriptor

Create a new blank screen and replace the code in the XML descriptor with the following:

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/examples/stackedarea-chart.xml[tags=stackedarea-chart]
----

<1> The root `window` element contains the `chart` namespace to enable using charts in the screen.
<2> The `chart:serialChart` component.
<3> `chart:chartCursor` – an element of the `chart:serialChart` component that adds a cursor to the chart. The cursor follows the mouse pointer and shows a tooltip with the value of the corresponding point on a chart.

* The `cursorAlpha` attribute defines the opacity of the cursor line.

<4> `chart:legend` – an element of the `chart:serialChart` component that defines the chart legend.

* The `position` attribute defines the location of the legend relative to the chart.
* The `equalWidths` attribute specifies if each legend entry should be equal to the widest entry.
* The `periodValueText` attribute defines the text that will be displayed in the value portion of the legend when the user is not hovering above any data point. The tags should be made out of two parts – the name of a field (value / open / close / high / low) and the value of the period you want to be show – open / close / high / low / sum / average / count.
* The `valueAlign` attribute defines the alignment of the value text. Possible values are `left` and `right`.
* The `valueWidth` attribute defines the width of the value text.

<5>  `chart:valueAxes` – an element of the `chart:serialChart` component that defines vertical value axes. In our case, only one vertical axis is used. The axis is described by the `chart:axis` element.

* The `position` attribute defines the position of the value axis relative to the chart.
* The `title` attribute defines the title of the value axis.
* Setting `stackType` to `REGULAR` makes the chart display a rolling value. Setting this attribute to `none` refers to a non-rolling value.
* The `gridAlpha` defines the opacity of grid lines.

<6> `chart:graphs` – an element of the `chart:serialChart` component  that contains a collection of `chart:graph` elements. The graph is described by the `chart:graph` element.

* The `type` attribute defines the type of the graph and can be: line, column, step line, smoothed line, OHLC, and candlestick.
* The `valueField` attribute defines a key from the list of pairs contained in the `DataItem` objects listed in the `DataProvider` instance; this key is used to determine the value.
* The `fillAlphas` attribute defines the opacity of fill.
* The `lineAlpha` attribute defines the opacity of the line (or column border). The value range is `0` – `1`.
* The `hidden` attribute specifies whether the graph is hidden.

<7> `chart:categoryAxis` – an element of the `chart:serialChart` component that describes the category axis.

* Setting `startOnAxis` to `true` causes drawing the chart right from the value axis. The default value for this attribute is `false`. In this case, there will be a small gap between the value axis and the chart.
* The `gridAlpha` attribute defines the opacity of grid lines.
* The `axisColor` attribute defines axis color.

<8> `chart:export` – an optional element that enables chart export.

[[from-dataprovider-screen-controller]]
=== Screen Controller

Open the `StackedareaChart` screen controller and replace its content with the following code:

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/StackedareaChart.java[tags=stackedarea-chart]
----

The `onInit` method submits data to the chart as a rolling value. This type of chart shows the ratio of separate parts to their total value.

[[from-dataprovider-result]]
=== Result

Now let’s see how the created screen looks in the actual application.

.Stacked Area Chart
image::charts/stackedarea-chart.png[align="center"]

[[creating-chart-with-incremental-data-update]]
== Creating Chart with Incremental Data Update

This chart will retrieve data from a data container, and this data will be updated automatically. The chart is not refreshed completely when new data is added to the data container: data points are added on the fly every 2 seconds. This approach will be useful, for example, for creating dynamically updated dashboards.

In this example, we will show the dynamic of new orders amounts based on the `Order` entity.

. Let's create the `Order` entity with the following attributes:
+
* `date` of the `Date` type
* `amount` of the `BigDecimal` type
* `description` of the `String` type
+
. Then create a new screen and call it `orders-history`.
. Replace the code in the XML descriptor with the following:
+
[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/examples/orders-history.xml[tags=orders-history]
----
<1> The root `window` element contains the `chart` namespace to enable using charts in the screen.
<2> We will not load the data from the container in this example. Instead, the sample data will be generated on the fly, so you don’t need to create a loader.
<3> We will update the chart on the fly using a `timer` – a facet that will send HTTP requests to the server side. Set the following properties:
+
* The timer `id`.
* The data should be updated every 2 seconds, so set `delay` to `2000` milliseconds.
* Select repeating and autostart checkboxes.
+
<4> The `serialChart` component has a data container bound to it. Set the `date` property for the category axis. 
<5> Set the `amount` property for the value axis.
+
. Switch to the `OrdersHistory` controller. Its code looks like this: 
+
[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/OrdersHistory.java[tags=orders-history1;orders-history2;orders-history3;orders-history4]
----
<1> Inject necessary dependencies: `metadata`, `timeSource`, and the data container for the `Order` entity.
<2> Initializes the chart in the `onInit()` method. We will generate a new `Order` instance with a random amount value.
<3> The new instance is added to the collection data container using the `getMutableItems().add()` method.
<4> Subscribes to `TimerActionEvent`. Using the same logic for creating a random Order instance, we will generate a new Order instance each time the timer event is fired.
+
. At this stage, the chart is already functional, but the data container size will increase rapidly, so we need to limit the number of items to be displayed. Let's add some code to the controller:
+
* Create a Queue of orders.
+
[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/OrdersHistory.java[tags=queue]
----
+
* Add the following code to the end of the `onTimerTick` method:
+
[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/OrdersHistory.java[tags=queue-code]
----
<1> Each time the timer event is fired, the generated item is added to the top of the `itemsQueue`.
<2> When the queue size exceeds 10 items, the oldest item is excluded.

[[data-update-result]]
=== Result

All the data is sent to the browser incrementally. If you open the Chrome developer console on the *Network* tab, you will see that every 2 seconds, our web page sends an HTTP request to the backend, and in response to that, the backend sends a small JSON message. The JSON contains one `add` and one `remove` operation for the `amount` value. Thus, we do not re-send all the data.

.The chart shows only 10 records at a time
image::charts/update-data.gif[align="center"]

[[using-events]]
== Using Events

Let’s consider the use of events. We will add handling of a graph item click to the screen created in the <<creating-chart-with-data-from-entity,example>> above. Add the following code to the screen controller:

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/Column3dChart.java[tags=notifications;column3d-chart2;listener;column3d-chart4;event-info]
----
<1> Injects the chart.
<2> Injects `Notifications` in order to show messages.
<3> Adds a listener at the bottom of the `onInit` method. 
<4> A method for getting the information about the element of the chart.
<5> The `SerialChart` component is bound to the data container, so the `getEntityNN()` method gets the item clicked. 

To see the results, open the screen and click one of the columns.

.Chart that handles graph item click event 
image::charts/using-events.png[align="center"]

[[configuration-using-json]]
== Configuration using JSON

In order to configure a chart, in addition to assigning XML attributes, you can use a custom JSON described in the http://docs.amcharts.com/3/javascriptcharts[AmCharts documentation^].

For example, we have a `serialChart`:

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/examples/serial-chart-json-title.xml[tags=json-title]
----

This chart has some data:

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/SerialChartJsonTitle.java[tags=json-title1;json-title2]
----

And now we can change the chart’s configuration. As an example, let’s add a title. Add the following code at the end of the `onInit` method:

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/examples/SerialChartJsonTitle.java[tags=json]
----

.Serial chart with JSON title 
image::charts/json-title.png[align="center"]

You can also set JSON configuration in the XML descriptor:

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/examples/serial-chart-json-title-two.xml[tags=json-title]
----