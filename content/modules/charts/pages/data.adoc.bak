= 数据绑定
:figure-caption!:

[[using-data-provider-interface]]
== 使用 DataProvider 接口

`DataProvider` 接口有两个标准实现：`ListDataProvider` 和 `ContainerDataProvider` 类。

一个 `DataProvider` 的实例会被传入图表配置的 `setDataProvider()` 方法。这种提供图表数据的方法是最通用的，但需要在界面控制器中创建 `DataProvider` 或 `DataItem` 的实例。

在 `DataProvider` 实例中包含用于展示的实体属性或值，需要在图表属性中定义。根据图表类型的不同，图表属性也不一样。例如，对于 `chart:pieChart` 组件，需要定义 `valueField` 和 `titleField` 属性。属性值可以使用这些类型：`Integer`、`Long`、`Double`、`String`、`Boolean`、`Date`。

[[list-data-provider]]
=== ListDataProvider

`ListDataProvider` 包含了一个 `DataItem` 实例的列表，图表的数据将从这个列表里获取。`DataItem` 接口有一些标准的实现：

* `EntityDataItem` 包含任意实体类的实例，从该实例中获取图表数据。
+
[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/export/EntityData.java[tags=entity-data-item]
----
+
* `MapDataItemScreen` 键值对集合，从中获取图表数据。
+
[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/data/MapDataItemScreen.java[tags=map-data-item]
----
+
* `SimpleDataItem` 使用任意 `public` 类的实例，从中获取图表数据。
+
[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/data/SimpleDataItemScreen.java[tags=simple-data-item]
----

[[container-data-provider]]
=== ContainerDataProvider

`ContainerDataProvider` 用于给 `Chart` 组件分配一个 xref:ui:data/collection-container.adoc[CollectionContainer]。

假设我们有数据容器和数据加载器用来加载 `TransportCount` 实例。下面是界面 XML 描述的部分内容：

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/data/container-data-provider-screen.xml[tags=provider1;provider2]
----

界面控制器定义了 `onInit()` 方法，设置了 `stackedArea` 图表的数据提供者。数据提供者基于 `transportCountsDc` 数据容器创建。

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/data/ContainerDataProviderScreen.java[tags=container-data-provider]
----

这种方式需要一个实体来表示图表数据。如果应用程序数据模型中已经存在这样的一个实体，并且图表数据是要显示为表格时，这种方式可能就比较方便。

[[using-simplified-data-binding]]
== 使用简易数据绑定

这种方法适合快速完成图表的原型，数据没有绑定至任何数据容器。使用 `chart:data` 和内部的 `item` 元素可以直接在图表的 XML 描述中设置键值对类型的数据，示例：

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/data/chart-data-element-screen.xml[tags=chart-data]
----

另外，也可以在界面控制器使用数据绑定 API 设置键值对。

将图表组件添加至界面，然后使用 `addData()` 方法填充数据，将一组使用键值对的 `MapDataItem` 实例作为参数传入：

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/data/simple-data-binding-screen.xml[tags=simple-data-binding]
----

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/data/SimpleDataBindingScreen.java[tags=simple-data-binding]
----

.简单饼图
image::charts/simple-pie-chart.png[align="center"]
