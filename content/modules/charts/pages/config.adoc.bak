= 图表配置
:figure-caption!:

每种图表类型有其本身的一组属性和方法，这些属性和方法是从 AmCharts 库的相应图表拷贝过来的。图表的属性和方法的文档可以参阅： http://docs.amcharts.com/3/javascriptcharts[AmCharts 文档^]。

任何可配置的属性都可以设置为 `null`。此时，系统会使用默认值（AmCharts 文档中指定的特殊情况除外）。

展示图表的文本信息可以通过 xref:localization:message-bundles.adoc[消息包] 自定义或本地化。

[[declarative-configuration]]
== 声明式配置

The elements described below can be used for declarative configuration of all types of charts.

[[all-labels]]
=== allLabels

该元素包含 `label` 元素，带有标签文字和其他属性。标签可以放在图表的特定位置，示例：

.chart:allLabels
image::charts/all-labels.png[align="center"]

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/columnline-screen.xml[tags=all-labels]
----

[[balloon]]
=== balloon

该元素配置鼠标悬停在图表数据项时显示的气球（提示窗），示例：

.chart:balloon
image::charts/balloon.png[align="center"]

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/polar-chart.xml[tags=balloon]
----

气球的文字通过每个图表的 `balloonText` 属性定义。

可以在图表的所有字段中插入图表的数据，比如 `titleField`、`valueField`、`category`、`value`、`description`、`percents`、`open` 等等，另外，HTML 标签中也能使用。

也可以使用 `additionalFields` 属性从数据提供者中获取更多的实体属性。通过这个属性可以将实体属性传递到图表的查询语句中，之后将抽取的数据返回给 UI，从而可以在图表的配置中直接使用这些实体属性的名称。

在下面的例子中，`title` 是图表的标题，`category` 是 category 轴的值，`value` 是 value 轴的值，`additional` 是 `IncomeExpenses` 实体属性，取出来用来插入到 `balloonText` 中：

.additionalFields
image::charts/add-field.png[align="center"]

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/columnline-chart-adfield.xml[tags=add-field]
----

字段列表可以通过逗号分隔的字符串声明式添加：

[source, xml, indent=0]
----
<chart:serialChart id="serialChart"
                   additionalFields="income,year"
                   <...>
                   />
<...>
</chart:serialChart>
----

或者通过编程的方式，在界面控制器中添加：

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/config/ColumnlineScreen.java[tags=add-fields]
----

[[chart-scrollbar]]
=== chartScrollbar

该元素可用于 xref:charts:types/serial-chart.adoc[SerialChart] 和 xref:charts:types/xy-chart.adoc[XYChart]。

* 可以设置具体图表通过滚动条进行缩放，示例：
+
.chart:chartScrollbar
image::charts/scrollbar.png[align="center"]
+
[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/scroll-bar-chart.xml[tags=scroll-bar]
----
+
* `GanttChart` 可以有一个 `chart:valueScrollbar` 元素用来滚动 value 轴，而使用 `chart:chartScrollbar` 用滚动 category 轴。
+
.chart:valueScrollbar
image::charts/value-scrollbar.png[align="center"]
+
[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/gantt-chart.xml[tags=scroll-bar]
----

[[cursor]]
=== cursor

可选元素，能在图表上添加光标。光标跟着鼠标指针走，展示图表上对应点的数值小弹窗。

.chart:cursor
image::charts/cursor.png[align="center"]

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/multiple-valueaxis-chart.xml[tags=cursor]
----

[[data]]
=== data

用于 xref:charts:data.adoc#using-simplified-data-binding[数据绑定] 的可选元素。主要用来做原型。

[[export]]
=== export

可选元素，可以启用 xref:charts:export.adoc[图表导出]。默认的实现会在图表上添加一个浮动的 *下载* 按钮：

.chart:export
image::charts/column-line-export.png[align="center"]

[[guides]]
=== guides

该元素添加水平和垂直的参考线。

.chart:guides
image::charts/guides.png[align="center"]

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/guides-chart.xml[tags=guides]
----

[[legend]]
=== legend

该元素定义图表的图例，示例：

.chart:legend
image::charts/legend.png[align="center"]

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/guides-chart.xml[tags=guides]
----

[[nativeJson]]
=== nativeJson

图表的 xref:charts:examples.adoc#json-title[JSON 配置]。

[[titles]]
=== titles

添加图表的标题。

.chart:titles
image::charts/titles.png[align="center"]

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/axis-titles-chart.xml[tags=titles]
----

[[responsive]]
=== responsive

图表的响应式插件。

此插件可以自动调整图表展示功能的大小以适应不同的屏幕分辨率。关于响应式插件的更多信息可以参阅 https://www.amcharts.com/kbase/making-charts-responsive/[AmCharts 网站^]。

`responsive` 元素需要包含内部的 `rules` 元素，用于定义适配的规则。可以设置图表是否显示图例、轴标题、参考线、图表标题、缩放控制器，或者将标签移入图表区域等：

[source, xml,indent=0]
----
include::example$/ex1/src/main/resources/charts/ex1/screen/charts/config/responsive-chart.xml[tags=responsive]
----

[[programmatic-configuration]]
== 编程式配置

在界面控制器配置图表也是按照相同的逻辑。可以配置单一属性，也可以配置组合对象：

[source, java,indent=0]
----
include::example$/ex1/src/main/java/charts/ex1/screen/charts/config/PieChartExample.java[tags=pie-chart-example]
----
